import os, string, random,  sqlite3
from django.db import OperationalError

def root():
    if not os.geteuid() == 0:
        print("Vous devez être root !")
    else:
        user = os.getlogin()
        print(f"Bienvenue, {user} !")
        database_exists()

def database_exists():
    try:
        conn = sqlite3.connect("passwords.db")
        cursor = conn.cursor()
        cursor.execute("""CREATE TABLE passwords(
            id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
            user TEXT,
            email TEXT,
            password TEXT,
            date BLOB)""")
        conn.commit()
        conn.close()
        print("Base de données créée.\n")
        os.system("sleep 1")
        print("Veuillez configurer un utilisateur !")
        create_user()
    except sqlite3.OperationalError:
        database_methods()


def create_user():
    user = os.getlogin()
    email = input("Entrez votre e-mail.")
    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    data = {"user" : user, "email" : email}
    cursor.execute("""INSERT INTO passwords(user, email) VALUES(:user, :email)""", data)
    conn.commit()
    conn.close()
    database_methods()

def database_methods():
    choix = eval(input("""Choisissez parmi les options suivantes :
    1) Générer et stocker un mot de passe sécurisé dans la base de données
    2) Chercher un mot de passe dans la base de données
    3) Mettre à jour un mot de passe
    4) Supprimer un mot de passe (supprimer une ligne de la base de données)
    5) Ajouter / Changer d'utilisateur dans la table USERS 
    >>> ... """))

    if choix == 1:
        generate_password()
    elif choix ==2:
        search_password()
    elif choix ==3:
        update_password()
    elif choix ==4:
        delete_line()
    elif choix ==5:
        update_users()

def generate_password():
    random_source = string.ascii_letters + string.digits + string.punctuation
    taille = int(input("Veuillez entre la taille du mot de passe. Celle-ci doit être comprise entre 12 et 20."))
    if 12<= taille <=20:
        password = ''.join(random.choice(random_source) for i in range(taille))
        print(f"Le mot de passe généré est : {password}")
        conn = sqlite3.connect("passwords.db")
        cursor = conn.cursor()
        cursor.execute("""SELECT user, email FROM passwords""")
        parameters = cursor.fetchone()
        ##il faut maintenant séparer les car dans parameters pour pouvoir les mettre dans la base de donnée
        cursor.execute("""INSERT INTO passwords(user, email, password) VALUES(?, ?, ?)""", (parameters, password))
        conn.commit()
        conn.close()
        print("Mot de passe enregistré.")
        database_methods() 
    else:
        print("Veuillez entrer une taille de mot de passe valide !")
        generate_password()

if __name__ == "__main__":
    root()

def store_password():
    #should store the password generated by generate_password function by hashing it first or, generate a password that the user decides to input himself.
    pass

def search_password():
    #should make an sql request to search for a password (from the line, or date, or anything) and decrypt hashed password and print the line. 
    pass

def update_password():
    #should update the password from the result of the function search_password(). 
    pass

def delete_line():
    #should delete a line with an sql request. Lines should therfore be listed with an integer auto-incremented 
    pass

def update_users():
    #should be able to make a request to the database
    pass

def hash_password(password):
    #should hash a password when a user enters or generate one. 
    pass

def decrypt_password(password):
    #should decrypt a password with the decrypting key, when a user asks for a password. 
    pass

def print_database(table):
    #should retrieve every element within table USERS or table PASSWORDS with an sql request and then print them out | 
    pass

def check_user():
    ##should check for the validity of the master_key, to give access to database. If no master keys exists, then create one
    pass

if __name__ == "__main__":
    root()

