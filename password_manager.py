import os, string, random, hashlib, sqlite3, time

def root():
    if not os.geteuid() == 0:
        print("Vous devez être root !")
    else:
        user = os.getlogin()
        print(f"Bienvenue, {user} !")
        os.system("sleep 1")
        database_exists()

def database_exists():
    try:
        conn = sqlite3.connect("create_db.db")
        cursor = conn.cursor()
        cursor.execute("""CREATE TABLE users(
            id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
            user TEXT,
            email TEXT)""")
        conn.commit()
        conn.close()
        print("Base de données créée. Veuillez configurer un mot de passe maître pour pouvoir y accéder, et l'utilisateur principal de la table USERS.\n")
        create_main_user()
        

    except sqlite3.OperationalError:
        print("Base de données détectée. Veuillez entrer votre mot de passe maître pour y accéder.\n")
        database_methods()

def create_main_user():
    choice = input(f"Current login name ({os.getlogin()}) set to default. Do you wish to change it ? Y/N :")
    if choice == "y" or "Y":
        user = input("Enter the main name :")
        email = input("Please enter the email for user 1.")
        conn = sqlite3.connect("create_db.db")
        cursor = conn.cursor()
        data = {"user" : user , "email" : email}
        cursor.execute("""INSERT INTO users(user, email) , VALUES(:user, :email)""", data)
        conn.commit()
        conn.close()
        print("User 1 was created !")
    elif choice == "n" or "N":
        email = input("Please enter the email for user 1.")
        conn = sqlite3.connect("create_db.db")
        cursor = conn.cursor()
        data = {"user" : user , "email" : email}
        cursor.execute("""INSERT INTO users(user, email) , VALUES(:user, :email)""", data)
        conn.commit()
        conn.close()
        print("User 1 was created !")
    else:
        print("Please enter a valid letter !")

def check_login():
    pass

def get_user():
    try:
        conn = sqlite3.connect("create_db.db")
        cursor = conn.cursor()
        cursor.execute("""SELECT id, name, email from users""")
        conn.commit()
        conn.close()
    except sqlite3.OperationalError:
        print("No id's found ! You need to create an id !")

def database_methods():
    choix = eval(input("""Choisissez parmi les options suivantes :
    1) Générer un mot de passe sécurisé
    2) Chercher un mot de passe dans la base de données
    3) Mettre à jour un mot de passe
    4) Supprimer un mot de passe (supprimer une ligne de la base de données)
    5) Ajouter un nouvel utilisateur dans la table USERS """))

    if choix == 1:
        generate_password()
    elif choix ==2:
        search_password()
    elif choix ==3:
        update_password()
    elif choix ==4:
        delete_line()
    elif choix ==5:
        update_users()

def generate_password():
    random_source = string.ascii_letters + string.digits + string.punctuation
    taille = int(input("Veuillez entre la taille du mot de passe. Celle-ci doit être comprise entre 12 et 20."))
    if 12<= taille <=20:
        password = ''.join(random.choice(random_source) for i in range(taille))
        print(f"Le mot de passe généré est : {password}")
        id = eval(input(f"""Veuillez séléctionner l'utilisateur :"""))
    else:
        print("Veuillez entrer une taille de mot de passe valide !")
        generate_password()

def store_password():
    #should store the password generated by generate_password function by hashing it first or, generate a password that the user decides to input himself.
    pass

def search_password():
    #should make an sql request to search for a password (from the line, or date, or anything) and decrypt hashed password and print the line. 
    pass

def update_password():
    #should update the password from the result of the function search_password(). 
    pass

def delete_line():
    #should delete a line with an sql request. Lines should therfore be listed with an integer auto-incremented 
    pass

def update_users():
    #should be able to make a request to the database
    pass

def hash_password(password):
    #should hash a password when a user enters or generate one. 
    pass

def decrypt_password(password):
    #should decrypt a password with the decrypting key, when a user asks for a password. 
    pass

def print_database(table):
    #should retrieve every element within table USERS or table PASSWORDS with an sql request and then print them out | 
    pass

def check_user():
    ##should check for the validity of the master_key, to give access to database. If no master keys exists, then create one
    pass

if __name__ == "__main__":
    root()

